// Generated by CoffeeScript 1.6.1
(function() {
  var Range, applyToShareJS, cursorToRange, rangeToCursor,
    __hasProp = {}.hasOwnProperty;

  Range = require("ace/range").Range;

  rangeToCursor = function(editorDoc, range) {
    var end, i, line, lines, offset, start, _i, _len, _ref;
    lines = editorDoc.$lines;
    _ref = [null, null], start = _ref[0], end = _ref[1];
    offset = 0;
    for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
      line = lines[i];
      if (i === range.start.row && !start) {
        start = offset + range.start.column + range.start.row;
      }
      if (i === range.end.row && !end) {
        end = offset + range.end.column + range.end.row;
      }
      offset += line.length;
      if ((start != null) && (end != null)) {
        return [start, end];
      }
    }
    return [start, end];
  };

  cursorToRange = function(editorDoc, cursor) {
    var end, i, line, lines, offset, range, start, _i, _len, _ref;
    if (!(cursor instanceof Array)) {
      cursor = [cursor, cursor];
    }
    lines = editorDoc.$lines;
    offset = 0;
    _ref = [null, null], start = _ref[0], end = _ref[1];
    for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
      line = lines[i];
      if (offset + line.length >= cursor[0] && !start) {
        start = {
          row: i,
          column: cursor[0] - offset
        };
      }
      if (offset + line.length >= cursor[1] && !end) {
        end = {
          row: i,
          column: cursor[1] - offset
        };
      }
      if (start && end) {
        range = new Range();
        range.cursor = {
          row: end.row,
          column: end.column
        };
        range.start = start;
        range.end = end;
        return range;
      }
      offset += line.length + 1;
    }
  };

  applyToShareJS = function(editorDoc, delta, doc) {
    var pos, text;
    pos = rangeToCursor(editorDoc, delta.range)[0];
    switch (delta.action) {
      case 'insertText':
        doc.insert(pos, delta.text);
        break;
      case 'removeText':
        doc.del(pos, delta.text.length);
        break;
      case 'insertLines':
        text = delta.lines.join('\n') + '\n';
        doc.insert(pos, text);
        break;
      case 'removeLines':
        text = delta.lines.join('\n') + '\n';
        doc.del(pos, text.length);
        break;
      default:
        throw new Error("unknown action: " + delta.action);
    }
  };

  window.sharejs.extendDoc('attach_ace', function(editor, keepEditorContents) {
    var check, cursorListener, doc, docListener, editorDoc, editorListener, offsetToPos, suppress, updateCursors;
    this.editorAttached = true;
    if (!this.provides['text']) {
      throw new Error('Only text documents can be attached to ace');
    }
    doc = this;
    editorDoc = editor.getSession().getDocument();
    editorDoc.setNewLineMode('unix');
    check = function() {
      return window.setTimeout(function() {
        var editorText, otText;
        editorText = editorDoc.getValue();
        otText = doc.getText();
        if (editorText !== otText) {
          console.error("Text does not match!");
          console.error("editor: " + editorText);
          return console.error("ot:     " + otText);
        }
      }, 0);
    };
    if (keepEditorContents) {
      doc.del(0, doc.getText().length);
      doc.insert(0, editorDoc.getValue());
    } else {
      editorDoc.setValue(doc.getText());
    }
    check();
    suppress = false;
    updateCursors = function() {
      var colors, cursor, cursorElement, cursorLayer, i, marker, range, ranges, sessionId, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _results;
      if ((_ref = this.markers) == null) {
        this.markers = [];
      }
      _ref1 = this.markers;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        marker = _ref1[_i];
        editor.session.removeMarker(marker);
      }
      ranges = [];
      _ref2 = this.cursors;
      for (sessionId in _ref2) {
        if (!__hasProp.call(_ref2, sessionId)) continue;
        cursor = _ref2[sessionId];
        range = cursorToRange(editorDoc, cursor);
        this.markers.push(editor.session.addMarker(range, "foreign_selection ace_selection", "line"));
        if (range) {
          ranges.push(range);
        }
      }
      ranges.push({
        cursor: null
      });
      editor.session.$selectionMarkers = ranges;
      cursorLayer = editor.renderer.$cursorLayer;
      cursorLayer.update(editor.renderer.layerConfig);
      colors = ["Brown", "DarkCyan", "DarkGreen", "DarkRed", "DarkSeaGreen", "MediumSlateBlue"];
      _ref3 = cursorLayer.cursors.slice(1);
      _results = [];
      for (i = _j = 0, _len1 = _ref3.length; _j < _len1; i = ++_j) {
        cursorElement = _ref3[i];
        _results.push(cursorElement.style.borderColor = colors[i % 6]);
      }
      return _results;
    };
    this.on("cursors", updateCursors);
    editorListener = function(change) {
      if (suppress) {
        return;
      }
      applyToShareJS(editorDoc, change.data, doc);
      updateCursors.call(doc);
      return check();
    };
    cursorListener = function(change) {
      var cursor;
      cursor = rangeToCursor(editorDoc, editor.getSelectionRange());
      return doc.setCursor(cursor);
    };
    editorDoc.on('change', editorListener);
    editor.on("changeSelection", cursorListener);
    docListener = function(op) {
      suppress = true;
      applyToDoc(editorDoc, op);
      suppress = false;
      return check();
    };
    offsetToPos = function(offset) {
      var line, lines, row, _i, _len;
      lines = editorDoc.getAllLines();
      row = 0;
      for (row = _i = 0, _len = lines.length; _i < _len; row = ++_i) {
        line = lines[row];
        if (offset <= line.length) {
          break;
        }
        offset -= lines[row].length + 1;
      }
      return {
        row: row,
        column: offset
      };
    };
    doc.on('insert', function(pos, text) {
      suppress = true;
      editorDoc.insert(offsetToPos(pos), text);
      suppress = false;
      return check();
    });
    doc.on('delete', function(pos, text) {
      var range;
      suppress = true;
      range = Range.fromPoints(offsetToPos(pos), offsetToPos(pos + text.length));
      editorDoc.remove(range);
      suppress = false;
      return check();
    });
    doc.detach_ace = function() {
      this.editorAttached = false;
      doc.removeListener('remoteop', docListener);
      doc.removeListener('cursors', updateCursors);
      editorDoc.removeListener('change', editorListener);
      editor.removeListener('changeSelection', cursorListener);
      return delete doc.detach_ace;
    };
  });

}).call(this);
